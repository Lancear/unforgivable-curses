String.prototype.replaceAll = function(search, replacement) {
  return this.split(search).join(replacement);
};

class EmojiNumber {
  static MAPPING = {
    '‚ûñ': '-',
    'üï≥': '.',
    '0Ô∏è‚É£': '0',
    '1Ô∏è‚É£': '1',
    '2Ô∏è‚É£': '2',
    '3Ô∏è‚É£': '3',
    '4Ô∏è‚É£': '4',
    '5Ô∏è‚É£': '5',
    '6Ô∏è‚É£': '6',
    '7Ô∏è‚É£': '7',
    '8Ô∏è‚É£': '8',
    '9Ô∏è‚É£': '9',
    'üîü': '10',
    'üíØ': '100',
    'üá¶': 'A',
    'üáß': 'B',
    'üá®': 'C',
    'üá©': 'D',
    'üá™': 'E',
    'üá´': 'F',
  };

  constructor(emojiNumber, base = 10) {
    this.emojiNumber = emojiNumber;
    this.base = base;
  }

  valueOf() {
    const mappedNumber = Object
      .keys(EmojiNumber.MAPPING)
      .reduce((value, key) => value.replaceAll(key, EmojiNumber.MAPPING[key]), this.emojiNumber);

    return mappedNumber.includes('.') ? Number(mappedNumber) : parseInt(mappedNumber, this.base);
  }
}

function Œª(emojiNumber) {
  if (Array.isArray(emojiNumber)) emojiNumber = emojiNumber.join('');
  return new EmojiNumber(emojiNumber);
}

function d(emojiNumber) {
  return Œª(emojiNumber);
}

function b(emojiNumber) {
  if (Array.isArray(emojiNumber)) emojiNumber = emojiNumber.join('');
  return new EmojiNumber(emojiNumber, 2);
}

function h(emojiNumber) {
  if (Array.isArray(emojiNumber)) emojiNumber = emojiNumber.join('');
  return new EmojiNumber(emojiNumber, 16);
}

const favNumber = b`1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£1Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£1Ô∏è‚É£`;
console.log(d`üíØ` * favNumber);

const discount = d`‚ûñ0Ô∏è‚É£üï≥2Ô∏è‚É£0Ô∏è‚É£`;
const orgPrice = h`üá®4Ô∏è‚É£`;
console.log(1 * orgPrice);
console.log(orgPrice + discount * orgPrice);
